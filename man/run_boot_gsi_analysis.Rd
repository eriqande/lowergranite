% Generated by roxygen2 (4.0.0): do not edit by hand
\name{run_boot_gsi_analysis}
\alias{run_boot_gsi_analysis}
\title{Run the bootstrap analysis, with gsi module if specified in parameters}
\usage{
run_boot_gsi_analysis(DAT.DIR = system.file("data_files", package =
  "lowergranite", mustWork = T), WORK.DIR = getwd(),
  STOCK.DATA.XLSX = file.path(DAT.DIR, "SH11SIMPOPstock.xlsx"),
  DO_GSI_ON_PROP = FALSE, GSISIM = gsi_simBinaryPath(), GSI_SEEDS = c(NA,
  NA), BLFILE = file.path(DAT.DIR, "sthd_base_v3_187.txt"),
  RUFILE = file.path(DAT.DIR, "sthd_base_v3_rg.txt"), alph = 0.1, B = 5,
  nsim = 2, console_messages_to = "")
}
\arguments{
  \item{DAT.DIR}{The directory where all the data files
  are.  Defaults to the dictory "data_files" in the
  installed package}

  \item{WORK.DIR}{The working directory to do this in.
  Default = current working directory. Note that gsi_sim
  will also be run in this directory, so it is where one
  should put a gsi_sim_seeds file if one wants to set the
  set for gsi_sim (otherwise it gets it from time or former
  seed file).}

  \item{STOCK.DATA.XLSX}{the path of the file that has the
  stock data in it used to drive the simulations}

  \item{DO_GSI_ON_PROP}{if set to TRUE then gsi_sim is used
  to create assignments that replace the assignments in the
  variable Prop.  If FALSE then the true origins are used.}

  \item{GSISIM}{path to the gsi_sim executable.}

  \item{GSI_SEEDS}{vector of two positive integers that
  will be written to the gsi_sim_seeds file to make
  reproducible results. If any elements of the vector are
  NA, then gsi_sim_seeds is not modified.}

  \item{BLFILE}{path to the gsi_sim baseline file.}

  \item{RUFILE}{path to the gsi_sim reporting group file.}

  \item{alph}{One minus the size of the desired confidence
  interval to be calculated}

  \item{B}{number of bootstrap replicates. The default is 5
  --- much lower than it should be (should be more like
  500) because it takes a long time and this is better for
  testing.}

  \item{nsim}{number of simulation replicates to do. The
  default is 2 --- much lower than it should be (should be
  more like 500) because it takes a long time and this is
  better for testing}

  \item{console_messages_to}{path to a file you want the
  console messages written to.  Note that it will always
  append these to a file.  Default is "" which means send
  it to the console.}
}
\description{
This is basically Kirk's script that eric has wrapped up into a function, and made
some significant changes to.  Notably, the interface to gsi_sim has been rewritten
to make it much more time efficient.  The simulated "true" data sets are all simulated
first and stored in a list, and then, if doing the gsi_sim part, all of that is passed
to gsi_sim in one fell swoop and the Groop of each fish is replaced by its "gsi-inferred"
Groop.
}
\details{
Note that the default valus here are set up to do an analysis of the steelhead data,
and, by default, to not use gsi_sim assigments.
}
\note{
You can expect to get warnings that look like this: \code{Warning message:}
\code{In system2(GSISIM, args = gsi.args, stdout = T) :}
\code{line 98 may be truncated in call to system(, intern = TRUE)}.  This is \emph{not} a problem.
The cause of this is that the output file from gsi_sim has a line it that shows that the
command line looked like after all the --multi-fix-mix commands were stuck onto it using
gsi_sim's --command-file option.  That line is so large that system() chops it into two
(or many, if you are doing large nsim).  This line is far away from any of the important
lines we will grep out, however, so it is not of any consequence.
}
\examples{
# Do a very short run with known stock of origin:
set.seed(5)
known_stock_result <- run_boot_gsi_analysis(nsim=40, B=500, DO_GSI_ON_PROP = F)

# do the same with gsi_assignments from super-informative data
set.seed(5)
super_informo_gsi_result <- run_boot_gsi_analysis(nsim=40, B=500, DO_GSI_ON_PROP = T,
                                                 BLFILE = file.path(DAT.DIR, "data_for_testing", "sthd_test_super_informo_baseline.txt")
                                                 )

# the two things above should be the same, but observe:
super_informo_gsi_result == known_stock_result

# it gets the correct result for most everything, but the CI coverages look unstable to me.
# why is that?
}

